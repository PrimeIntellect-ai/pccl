name: Publish Release

on:
  push:
    tags:
      - release/*

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
  build:
    needs: create_release
    runs-on: ${{ matrix.runs-on }}
    env:
      IS_CI: 1
      IS_CPU_CI: 1
      LSAN_OPTIONS: suppressions=${{ github.workspace }}/.github/workflows/lsan.supp
      PCCL_LOG_LEVEL: DEBUG  # Global log level set to DEBUG

    strategy:
      fail-fast: false

      matrix:
        include:
          # Linux configurations using self-hosted runners
          - runs-on: [ self-hosted, Linux, X64, cpu ]
            os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            is_host_arch: true
            generator: Ninja
            build_type: Release
            pccl_build_cuda_support: OFF

          - runs-on: [ self-hosted, Linux, X64, cuda ]
            os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            is_host_arch: true
            generator: Ninja
            build_type: Release
            pccl_build_cuda_support: ON

          # Windows configurations using self-hosted runners
          # x86_64, no cuda
          - runs-on: [ self-hosted, Windows, X64, cpu ]
            os: windows-latest
            msvc_cpu_arch: amd64
            is_host_arch: true
            make_program: C:/Program Files/NinjaBuild/bin/ninja.exe
            generator: Ninja
            build_type: Release
            pccl_build_cuda_support: OFF

          # x86_64 with cuda
          - runs-on: [ self-hosted, Windows, X64, cuda ]
            os: windows-latest
            msvc_cpu_arch: amd64
            is_host_arch: true
            make_program: C:/Program Files/NinjaBuild/bin/ninja.exe
            generator: Ninja
            build_type: Release
            pccl_build_cuda_support: ON

          # aarch64, no cuda (cross-compile, no testing!)
          - runs-on: [ self-hosted, Windows, X64, cpu ]
            os: windows-latest
            msvc_cpu_arch: amd64_arm64 # cross compile arm64 on x86_64
            is_host_arch: false
            make_program: C:/Program Files/NinjaBuild/bin/ninja.exe
            toolchain_file: cmake/toolchains/x86_64-cross-arm64-toolchain.cmake
            generator: Ninja
            build_type: Release
            pccl_build_cuda_support: OFF

          # MacOS configuration using self-hosted runners
          - runs-on: [ self-hosted, macOS, ARM64, cpu ]
            os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            is_host_arch: true
            generator: Ninja
            build_type: Release
            pccl_build_cuda_support: OFF

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings (Unix)
        id: strings-unix
        if: runner.os != 'Windows'
        shell: bash
        run: |
          build_output_dir="${{ github.workspace }}/build"
          echo "build-output-dir=$build_output_dir" >> "$GITHUB_OUTPUT"

      - name: Set reusable strings (Windows)
        id: strings-windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $build_output_dir = "${{ github.workspace }}/build"
          echo "build-output-dir=$build_output_dir" >> $env:GITHUB_OUTPUT

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: >
          cmake -B ${{steps.strings-unix.outputs.build-output-dir }}
          -G "${{ matrix.generator }}"
          "-DPCCL_SANITIZE_TESTS=ON"
          "-DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}"
          "-DCMAKE_C_COMPILER=${{ matrix.c_compiler }}"
          "-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}"
          "-DPCCL_BUILD_STATIC_LIB=OFF"
          "-DPCCL_BUILD_CUDA_SUPPORT=${{ matrix.pccl_build_cuda_support }}"
          -S "${{ github.workspace }}"

      - name: Configure CMake (macOS)
        if: runner.os == 'macOS'
        run: >
          cmake -B ${{steps.strings-unix.outputs.build-output-dir }}
          -G "${{ matrix.generator }}"
          "-DPCCL_SANITIZE_TESTS=ON"
          "-DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}"
          "-DCMAKE_C_COMPILER=${{ matrix.c_compiler }}"
          "-DPCCL_BUILD_STATIC_LIB=OFF"
          "-DCMAKE_BUILD_TYPE=Debug" # Release builds on macOS are prone to overzealous loads, causing ASAN false positives
          "-DPCCL_BUILD_CUDA_SUPPORT=${{ matrix.pccl_build_cuda_support }}"
          -S "${{ github.workspace }}"


      - name: Configure CMake (Windows, cross-compile)
        if: runner.os == 'Windows' && !matrix.is_host_arch
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_cpu_arch }}
          cmake -B ${{steps.strings-windows.outputs.build-output-dir }} -G ${{ matrix.generator }} "-DCMAKE_MAKE_PROGRAM=${{ matrix.make_program }}" "-DPCCL_BUILD_CUDA_SUPPORT=${{ matrix.pccl_build_cuda_support }}" "-DPCCL_BUILD_STATIC_LIB=OFF" "-DPCCL_SANITIZE_TESTS=OFF" -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/${{ matrix.toolchain_file }} -S "${{ github.workspace }}"

      - name: Configure CMake (Windows, native)
        if: runner.os == 'Windows' && matrix.is_host_arch
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_cpu_arch }}
          cmake -B ${{steps.strings-windows.outputs.build-output-dir }} -G ${{ matrix.generator }} "-DCMAKE_MAKE_PROGRAM=${{ matrix.make_program }}" "-DPCCL_BUILD_CUDA_SUPPORT=${{ matrix.pccl_build_cuda_support }}" "-DPCCL_BUILD_STATIC_LIB=OFF" "-DPCCL_SANITIZE_TESTS=OFF" -S "${{ github.workspace }}"

      - name: Build (Unix)
        if: runner.os != 'Windows'
        run: cmake --build ${{ steps.strings-unix.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

      - name: Build (Windows)
        shell: cmd
        if: runner.os == 'Windows'
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_cpu_arch }}
          cmake --build "${{ steps.strings-windows.outputs.build-output-dir }}" --config ${{ matrix.build_type }} --parallel

      - name: Compile Python wheel (Windows, cross-compile)
        if: runner.os == 'Windows' && !matrix.is_host_arch
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_cpu_arch }}
          set MAKE_PROGRAM${{ matrix.make_program }}
          set CMAKE_GENERATOR=${{ matrix.generator }}
          set CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/${{ matrix.toolchain_file }}
          set PCCL_BUILD_CUDA_SUPPORT=${{ matrix.pccl_build_cuda_support }}
          cd ${{ github.workspace }}/python/framework && pip3 wheel --verbose -w dist .

      - name: Compile Python wheel (Windows, native)
        if: runner.os == 'Windows' && matrix.is_host_arch
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_cpu_arch }}
          set MAKE_PROGRAM${{ matrix.make_program }}
          set CMAKE_GENERATOR=${{ matrix.generator }}
          set PCCL_BUILD_CUDA_SUPPORT=${{ matrix.pccl_build_cuda_support }}
          cd ${{ github.workspace }}/python/framework && pip3 wheel --verbose -w dist .

      - name: Compile Python wheel (Unix)
        if: runner.os != 'Windows'
        run: cd ${{ github.workspace }}/python/framework && CMAKE_GENERATOR="${{ matrix.generator }}" PCCL_BUILD_CUDA_SUPPORT=${{ matrix.pccl_build_cuda_support }} pip3 wheel --verbose -w dist .

      - name: Prepare artifacts directory (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts/lib artifacts/include
          cp "${{ steps.strings-unix.outputs.build-output-dir }}"/*pccl.* artifacts/lib/
          cp ./include/*.h artifacts/include/

      - name: Prepare artifacts directory (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path artifacts\lib, artifacts\include
          Copy-Item -Path "${{ steps.strings-windows.outputs.build-output-dir }}\*pccl.*" -Destination artifacts\lib
          Copy-Item -Path ".\include\*.h" -Destination artifacts\include

      - name: Create Python virtual environment (Unix)
        if: ${{ runner.os != 'Windows' && matrix.is_host_arch }}
        run: python3 -m venv ${{ github.workspace }}/venv

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libpccl-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.pccl_build_cuda_support == 'ON' && 'cuda' || 'nocuda' }}-${{ github.run_id }}
          path: artifacts

      - name: Create Python virtual environment (Windows)
        if: ${{ runner.os == 'Windows' && matrix.is_host_arch }}
        run: python -m venv ${{ github.workspace }}/venv

      - name: Activate virtual environment (Unix)
        if: ${{ runner.os != 'Windows' && matrix.is_host_arch }}
        run: echo 'PATH=${{ github.workspace }}/venv/bin:$PATH' >> $GITHUB_ENV

      - name: Activate virtual environment (Windows)
        if: ${{ runner.os == 'Windows' && matrix.is_host_arch }}
        shell: powershell
        run: |
          echo "${{ github.workspace }}\venv\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install packaging dependencies
        if: runner.os != 'Windows' && matrix.is_host_arch
        run: |
          source ${{ github.workspace }}/venv/bin/activate
          pip install --upgrade pip setuptools wheel twine

      - name: Store the wheel packages
        uses: actions/upload-artifact@v4
        with:
          name: pypccl-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.pccl_build_cuda_support == 'ON' && 'cuda' || 'nocuda' }}-${{ github.run_id }}
          path: ./python/framework/dist/pypccl-*.whl

      - name: Find Python wheel (Unix)
        if: runner.os != 'Windows'
        id: find_wheel_unix
        shell: bash
        run: |
          for file in "${{ github.workspace }}/python/framework/dist/"*pccl*.whl; do
            echo "wheel_path=$file" >> "$GITHUB_OUTPUT"
            echo "wheel_name=${file##*/}" >> "$GITHUB_OUTPUT"
            break
          done

      - name: Find Python wheel (Windows)
        if: runner.os == 'Windows'
        id: find_wheel_windows
        shell: powershell
        run: |
          $file = Get-ChildItem -Path "${{ github.workspace }}\python\framework\dist" -Filter "*pccl*.whl" | Select-Object -First 1
          echo "wheel_path=$($file.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8
          echo "wheel_name=$($file.Name)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ runner.os == 'Windows' && steps.find_wheel_windows.outputs.wheel_path || steps.find_wheel_unix.outputs.wheel_path }}
          asset_name: ${{ replace(runner.os == 'Windows' && steps.find_wheel_windows.outputs.wheel_name || steps.find_wheel_unix.outputs.wheel_name, '.whl', matrix.pccl_build_cuda_support == 'ON' && 'cuda.whl' || 'nocuda.whl') }}
          asset_content_type: application/zip