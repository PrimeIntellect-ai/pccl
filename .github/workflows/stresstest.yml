name: Stresstest

on:
  push:
    tags: [ 'stress-test' ]

jobs:
  build:
    runs-on: ${{ matrix.runs-on }}
    env:
      IS_CI: 1
      IS_CPU_CI: 1
      LSAN_OPTIONS: suppressions=${{ github.workspace }}/.github/workflows/lsan.supp
      PCCL_LOG_LEVEL: DEBUG  # Global log level set to DEBUG

    strategy:
      fail-fast: false

      matrix:
        include:
          # Linux configurations using self-hosted runners
          - runs-on: [ self-hosted, Linux, X64, cpu ]
            os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            is_host_arch: true
            generator: Ninja
            build_type: Release
            pccl_build_cuda_support: OFF

          - runs-on: [ self-hosted, Linux, X64, cuda ]
            os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            is_host_arch: true
            generator: Ninja
            build_type: Release
            pccl_build_cuda_support: ON

          # Windows configurations using GitHub-hosted runners
          # x86_64, no cuda
          - runs-on: [ self-hosted, Windows, X64, cpu ]
            os: windows-latest
            msvc_cpu_arch: amd64
            is_host_arch: true
            make_program: C:/Program Files/NinjaBuild/bin/ninja.exe
            generator: Ninja
            build_type: Release
            pccl_build_cuda_support: OFF

          # x86_64 with cuda
          - runs-on: [ self-hosted, Windows, X64, cuda ]
            os: windows-latest
            msvc_cpu_arch: amd64
            is_host_arch: true
            make_program: C:/Program Files/NinjaBuild/bin/ninja.exe
            generator: Ninja
            build_type: Release
            pccl_build_cuda_support: ON

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings (Unix)
        id: strings-unix
        if: runner.os != 'Windows'
        shell: bash
        run: |
          build_output_dir="${{ github.workspace }}/build"
          echo "build-output-dir=$build_output_dir" >> "$GITHUB_OUTPUT"

      - name: Set reusable strings (Windows)
        id: strings-windows
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $build_output_dir = "${{ github.workspace }}/build"
          echo "build-output-dir=$build_output_dir" >> $env:GITHUB_OUTPUT


      - name: Compile Python wheel (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_cpu_arch }}
          set MAKE_PROGRAM=${{ matrix.make_program }}
          set CMAKE_GENERATOR=${{ matrix.generator }}
          set PCCL_BUILD_CUDA_SUPPORT=${{ matrix.pccl_build_cuda_support }}
          cd ${{ github.workspace }}/python/framework && pip3 wheel --verbose -w dist .

      - name: Compile Python wheel (Unix)
        if: runner.os != 'Windows'
        run: cd ${{ github.workspace }}/python/framework && CMAKE_GENERATOR=${{ matrix.generator }} PCCL_BUILD_CUDA_SUPPORT=${{ matrix.pccl_build_cuda_support }} pip3 wheel --verbose -w dist .

      - name: Create Python virtual environment (Unix)
        if: ${{ runner.os != 'Windows' && matrix.is_host_arch }}
        run: python3 -m venv ${{ github.workspace }}/venv

      - name: Create Python virtual environment (Windows)
        if: ${{ runner.os == 'Windows' && matrix.is_host_arch }}
        run: python -m venv ${{ github.workspace }}/venv

      - name: Activate virtual environment (Unix)
        if: ${{ runner.os != 'Windows' && matrix.is_host_arch }}
        run: echo 'PATH=${{ github.workspace }}/venv/bin:$PATH' >> $GITHUB_ENV

      - name: Activate virtual environment (Windows)
        if: ${{ runner.os == 'Windows' && matrix.is_host_arch }}
        shell: powershell
        run: |
          echo "${{ github.workspace }}\venv\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install wheel (Windows)
        if: ${{ runner.os == 'Windows' && matrix.is_host_arch }}
        shell: pwsh
        run: |
          $wheels = Get-ChildItem "$env:GITHUB_WORKSPACE\python\framework\dist\pccl-*.whl"
          if (-Not $wheels) {
            Write-Error "No .whl files found!"
            exit 1
          }
          pip install $wheels

      - name: Install wheel (Unix)
        if: ${{ runner.os != 'Windows' && matrix.is_host_arch }}
        shell: bash
        run: |
          python -m pip install ./python/framework/dist/pccl-*.whl

      - name: Install stress-test dependencies
        if: ${{ matrix.is_host_arch }}
        run: |
          python -m pip install -r ${{ github.workspace }}/python/tests/stress_tests/requirements.txt
          python -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126

      - name: Run Stress Test
        if: ${{ matrix.is_host_arch }}
        run: python ${{ github.workspace }}/python/tests/stress_tests/stresstest_orchestrator.py
